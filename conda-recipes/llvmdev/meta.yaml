{% set shortversion = "10.0" %}
{% set version = "10.0.1" %}
{% set sha256_llvm = "c5d8e30b57cbded7128d78e5e8dad811bff97a8d471896812f57fa99ee82cdf3" %}
{% set sha256_lld = "591449e0aa623a6318d5ce2371860401653c48bb540982ccdd933992cb88df7a" %}
{% set build_number = "0" %}

package:
  name: llvmdev
  version: {{ version }}

source:
  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/llvm-{{ version }}.src.tar.xz
    fn: llvm-{{ version }}.src.tar.xz
    sha256: {{ sha256_llvm }}
    patches:
    # http://lists.llvm.org/pipermail/llvm-dev/2016-January/094520.html
    - ../llvm-lto-static.patch   # [win]
    - ../partial-testing.patch
    # Intel SVML optimizations (two patches)
    # Latest versions from:
    # * https://github.com/conda-forge/llvmdev-feedstock/blob/c706309/recipe/patches/intel-D47188-svml-VF.patch
    # * https://github.com/conda-forge/llvmdev-feedstock/blob/c706309/recipe/patches/expect-fastmath-entrypoints-in-add-TLI-mappings.ll.patch
    - ../intel-D47188-svml-VF.patch
    - ../expect-fastmath-entrypoints-in-add-TLI-mappings.ll.patch
    # Reverts a patch limiting non-GlobalValue name length
    - ../0001-Revert-Limit-size-of-non-GlobalValue-name.patch
    # Reverts a patch that auto-upgrades NVVM atomic intrinsics to atomicrmw instructions that NVVM doesn't recognise
    - ../0001-Revert-NVPTX-Use-atomicrmw-fadd-instead-of-intrinsic.patch
    - ../0002-Revert-NVPTX-Remove-now-unused-atomic.load.add.f32-i.patch

  - url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/lld-{{ version }}.src.tar.xz
    fn: lld-{{ version }}.src.tar.xz
    sha256: {{ sha256_lld }}
    folder: tools/lld

build:
  number: {{ build_number }}
  script_env:
    - PY_VCRUNTIME_REDIST
  ignore_run_exports:
    # Is static-linked
    - xar

requirements:
  build:
    # We cannot do this on macOS or windows
    # OSX already has llvm so has to be handled
    # at build.sh time
    # Windows needs to build using vs2015_runtime
    # irrespective of python version
    - {{ compiler('c') }} # [unix and not (armv6l or armv7l)]
    - {{ compiler('cxx') }} # [unix and not (armv6l or armv7l)]
    - cmake
    # Needed to unpack the source tarball
    - m2w64-xz  # [py27 and win]
    # ninja not currently used, bld.bat needs an update
    - ninja  # [win]
    # Needed to build LLVM
    - python >=3
    # need vs2015_runtime to build, do not want it at run time
    # as extensions for py27 need vs2008
    - vs2015_runtime # [win]
    - make # [unix and not (armv6l or armv7l or aarch64)]
  host:
    # needed for llc at runtime
    - zlib # [not win]
    - xar # [osx]
    # llvm-lit testing needs *a* python
    - python # [not (armv6l or armv7l or aarch64 or win)]

test:
  requires:
    - python
  files:
    - cfg_test.ll
    - numba-3016.ll
    - test_cfg_dot.py
  commands:
    - $PREFIX/bin/llvm-config --libs                         # [not win]
    - $PREFIX/bin/llc -version                               # [not win]

    - if not exist %LIBRARY_INC%\\llvm\\Pass.h exit 1        # [win]
    - if not exist %LIBRARY_LIB%\\LLVMSupport.lib exit 1     # [win]

    - test -f $PREFIX/include/llvm/Pass.h                    # [unix]
    - test -f $PREFIX/lib/libLLVMSupport.a                   # [unix]

    - test -f $PREFIX/lib/libLLVMCore.a                      # [not win]
    # Test for Twine bug
    - $PREFIX/bin/opt -dot-cfg cfg_test.ll -o cfg.testme.tmp # [not win]
    - python test_cfg_dot.py                                 # [not win]

    # LLD tests
    - ld.lld --version                                       # [unix]
    - lld-link /?                                            # [win]

about:
  home: http://llvm.org/
  dev_url: https://github.com/llvm-mirror/llvm
  license: NCSA
  license_file: LICENSE.TXT
  summary: Development headers and libraries for LLVM
